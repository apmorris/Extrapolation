#
# Plot the efficiencies for sets of samples that are different lifetimes but the
# same otherwise.
#

include ("common.plotlingo");
include ("dataset_list_extrap_check.plotlingo");
NormalizePlots();

# Samles we will look at.
samples = ["200pi50", "1000pi400", "600pi50"];

for (sample, samples) {
	plots = map(lt, ["lt5mW", "lt9mW"]) {
		pname = "{sample}{lt}";
		eval("plot = f_eff_{pname};");
		info = sample_metadata[pname];
		mass = info["m"];
		pi = info["pi"];
		lt = info["lt"];
		c = info["Color"];
		p = plot.Get("h_res_eff_A").tag(pname);
		Legend("{pname}" => {Title=> "m_{#phi} = {mass} GeV, m_{s} = {pi} GeV, ctau = {lt} m", Color=> c});
		p;
	};
	
	plots
		.plot()
		.drawingOptionAfter(1, "HIST")
		.xaxis("s proper decay length [m]")
		.yaxis("Global Efficiency")
		.LegendOptions({scale => 0.8})
		.title("")
		.logx()
		.filename("extrap_line_{sample}")
		;
};

Legend("point_600pi50_9" => {Title => "m_{#phi} = 600 GeV, m_{s} = 50 GeV, ctau = 9 m", Color => 46});
Legend("point_600pi50_5" => {Title => "m_{#phi} = 600 GeV, m_{s} = 50 GeV, ctau = 5 m", Color => 39});


# Do closure test as well as extrapolation test.
for (sample, samples) {
	eval ("p1f9 = f_eff_{sample}lt9mW;");
	p19 = p1f9.Get("h_res_eff_A").tag("{sample}lt9mW");
	eval ("p1f5 = f_eff_{sample}lt5mW;");
	p15 = p1f5.Get("h_res_eff_A").tag("{sample}lt5mW");
	eval ("evtot9 = evt_{sample}lt9mW_tot;");
	eval ("evtot5 = evt_{sample}lt5mW_tot;");
	eval ("evA9 = evt_{sample}lt9mW_A;");
	eval ("evA5 = evt_{sample}lt5mW_A;");
	eval ("ctau9 = ctau_{sample}lt9mW;");
	eval ("ctau5 = ctau_{sample}lt5mW;");
	
	p29 = ratioPointAsPlot(p19, ctau9, evA9, evtot9).tag("point_{sample}_9");
	p25 = ratioPointAsPlot(p15, ctau5, evA5, evtot5).tag("point_{sample}_5");
	
	[p19, p29]
		.plot()
		.title("")
		.logx()
		.xaxis("s proper decay length [m]")
		.yaxis("Global Efficiency")
		.LegendOptions({scale => 0.8})
		.filename("closure_{sample}lt9mW");
	
	[p15, p25]
		.plot()
		.title("")
		.logx()
		.xaxis("s proper decay length [m]")
		.yaxis("Global Efficiency")
		.LegendOptions({scale => 0.8})
		.filename("closure_{sample}lt5mW");

	[p19, p25, p29]
		.plot()
		.title("")
		.logx()
		.xaxis("s proper decay length [m]")
		.yaxis("Global Efficiency")
		.LegendOptions({scale => 0.6, placement => "UpperLeft", xmarg => 0.15, ymarg => 0.1})
		.filename("extrap_point_{sample}");
};

