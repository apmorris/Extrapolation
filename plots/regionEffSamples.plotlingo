#
# Generate some nice(er) plots of the training results.
#

include ("common.plotlingo");
NormalizePlots();

regions = ["A", "B", "C", "D"];
samples = ["400pi50lt5m", "600pi150lt5m", "600pi50lt5m", "1000pi400lt5m"];

# Make a legend so we can deal with this
for(sm, samples) {
	dict = sample_metadata[sm];
	mass = dict["m"];
	pi = dict["pi"];
	Legend("{sm}" => {Color => dict["Color"], Title => "m_{\phi} = {mass} GeV, m_{s} = {pi} GeV"});
};

plot_pairs = map(region, regions) {
  plots = map(ds, samples) {
	eval("f = f_eff_{ds};");
	f.Get("h_res_eff_{region}").tag(ds);
  };
  {region => region, plots => plots};
};

for(p, plot_pairs) {
    reg = p["region"];
	p["plots"].plot()
		.title("")
		.xaxis("Lifetime [m]")
		.LegendOptions({placement => "UpperRight", drawbox => "false", xmarg => 0.0, scale => 0.6})
		.logx()
		.yaxis("Global Efficiency")
		.size(1200,800)
		.filename("sample_region_{reg}");
};
